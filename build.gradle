buildscript {
	repositories {
		jcenter()
		maven { url "https://plugins.gradle.org/m2/" } // only needed for java formatter
	}
	dependencies {
		// builds canonical OSGI bundles
		classpath "org.dm.gradle:gradle-bundle-plugin:${VER_BUNDLE}"
		// applies the Eclipse java formatter
		classpath "gradle.plugin.com.github.youribonnaffe.gradle.format:gradle-format-plugin:${VER_FORMAT}"
		// enforces and applies the license header
		classpath "nl.javadude.gradle.plugins:license-gradle-plugin:${VER_LICENSE}"
		// uploads artifacts to jcenter
		classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:${VER_BINTRAY}"
	}
}

repositories {
	jcenter()
}

////////////
// GRADLE //
////////////
task wrapper(type: Wrapper) {
	gradleVersion VER_GRADLE
}

//////////
// JAVA //
//////////
apply plugin: 'java'
sourceSets {
	main { java {
			srcDir 'src'
	} }
	test { java {
			srcDir 'test'
	} }
}
sourceCompatibility = VER_JAVA
targetCompatibility = VER_JAVA

dependencies {
	testCompile "junit:junit:${VER_JUNIT}"
}

//////////
// OSGI //
//////////
apply plugin: 'org.dm.bundle'

bundle {
	instruction 'Bundle-Vendor', 'DiffPlug'
	instruction 'Bundle-Description', "${description}"
	instruction 'Bundle-DocURL', 'https://github.com/diffplug/durian'
	instruction 'Bundle-License', 'http://www.apache.org/licenses/LICENSE-2.0.txt'
	instruction 'Bundle-RequiredExecutionEnvironment', 'JavaSE-1.8'
	instruction 'Export-Package', 'com.diffplug.common.*'
}

// make sure we know what's going on with our OSGI manifest
task copyManifest(dependsOn: jar, type: Copy) {
	from 'build/tmp/jar'
	into 'META-INF'
	include 'MANIFEST.MF'
}
build.dependsOn(copyManifest)

/////////////
// ECLIPSE //
/////////////
apply plugin: 'eclipse'
eclipse {
	project {
		natures 'org.eclipse.pde.PluginNature'
		natures 'org.eclipse.jdt.core.javanature'

		buildCommand 'org.eclipse.jdt.core.javabuilder'
		buildCommand 'org.eclipse.pde.ManifestBuilder'
		buildCommand 'org.eclipse.pde.SchemaBuilder'

		// filter out the build folder
		file {
			withXml { xmlProvider ->
				Node project = xmlProvider.asNode()
				Node filter = project.appendNode('filteredResources').appendNode('filter')
				filter.appendNode('id', project.name.hashCode()) 	// use the project name's hash as the filter ID
				filter.appendNode('name', '')
				filter.appendNode('type', 10)
				Node matcher = filter.appendNode('matcher')
				matcher.appendNode('id', 'org.eclipse.ui.ide.multiFilter')
				matcher.appendNode('arguments', '1.0-name-matches-false-false-build')
			}
		}
	}
	classpath {
		downloadSources true
		downloadJavadoc true
	}
	jdt {
		sourceCompatibility VER_JAVA
		targetCompatibility VER_JAVA
	}
}
// always create fresh projects
tasks.eclipse.dependsOn(cleanEclipse)

////////////
// FORMAT //
////////////
apply plugin: 'com.github.youribonnaffe.gradle.format'
format {
	configurationFile file('format_java.properties')
}

apply plugin: 'license'
license {
	include '**/*.java'
	header file('format_license.txt')
}

//////////////
// FINDBUGS //
//////////////
apply plugin: 'findbugs'
findbugs {
	toolVersion = VER_FINDBUGS
	sourceSets = []			// don't run findbugs on a regular build
	ignoreFailures = true 	// don't stop a build because of findbugs
	reportsDir = file('build/findbugs')
	effort = 'max'			// min|default|max
	reportLevel = 'high'	// low|medium |high
	omitVisitors = []		// bugs that we want to ignore
}

// XML instead of HTML
tasks.withType(FindBugs) {
	reports {
		xml.enabled = true
		html.enabled = false
	}
}
// we'll want the findbugs annotations
dependencies {
	compile "com.google.code.findbugs:annotations:${VER_FINDBUGS}"
}

///////////
// MAVEN //
///////////
apply plugin: 'maven-publish'
group = 'com.diffplug.durian'

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allJava
}

// Where it's possible to name parameters and methods clearly enough
// that javadoc is not necessary, why make the code bigger?
//
// Thus, no javadoc warnings.
javadoc {
	options.addStringOption('Xdoclint:none', '-quiet')
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
		}
	}
	if (project.hasProperty('dp_maven')) {
		repositories {
			maven {
				if (project.version.endsWith('-SNAPSHOT')) {
					url "${dp_maven}/libs-snapshot-local"
				} else {
					url "${dp_maven}/libs-release-local"
				}

				credentials {
					username "${dp_maven_user}"
					password "${dp_maven_pass}"
				}
			}
		}
	}
}

/////////////
// BINTRAY //
/////////////
if (project.hasProperty('dp_bintray_user')) {
	apply plugin: 'com.jfrog.bintray'
	bintray {
		user = dp_bintray_user
		key = dp_bintray_key

		publish=false
		publications = ['mavenJava']
		pkg {
			repo = 'opensource'
			name = 'durian'
			userOrg = 'diffplug'
			desc = description
			websiteUrl = 'https://github.com/diffplug/durian'
			issueTrackerUrl = 'https://github.com/diffplug/durian/issues'
			vcsUrl = 'https://github.com/diffplug/durian.git'
			licenses = ['Apache-2.0']
			labels = ['guava', 'rxjava', 'reactive', 'rx', 'java8', 'diffplug', 'durian']
			publicDownloadNumbers = true
			// Optional version descriptor
			version {
				name = project.version
				if (project.version.endsWith('SNAPSHOT')) {
					vcsTag = 'develop'
				} else {
					vcsTag = 'release/' + project.version
				}
			}
		}
	}
	// surprisingly, this actually needs to be here
	bintrayUpload.dependsOn(publish)
}
